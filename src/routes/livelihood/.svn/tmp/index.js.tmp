import React from 'react'
import { connect } from 'dva'
import ReactDOM from 'react-dom'
import Nav from 'components/nav'
import styles from './index.less'
import { Tabs, Badge, WhiteSpace, Grid, List, Icon } from 'components'
<<<<<<< .mine
import { routerRedux } from 'dva/router'
=======
import PullToRefresh from 'components/pulltorefresh'
>>>>>>> .r25
import Tile from 'components/tile'
import { getLocalIcon } from 'utils'

const Item = List.Item,
  Brief = Item.Brief,
  Colors = ['greenyellow', 'lightskyblue', '#e8e862', '#f178d7'],
  getCurrentColor = (i) => i > Colors.length ? Colors[i % Colors.length] : Colors[i],
  PrefixCls = 'livelihood'
let currentPtr = ''

function Livelihood ({ location, dispatch, livelihood }) {
  const { name = '' } = location.query,
    { tabs, items, ptrEl } = livelihood,
    ptrId = PrefixCls + '_ptr',
    handleClick = (e) => {
<<<<<<< .mine
      let anchorElement = document.getElementById(e.key)
      if (anchorElement) {
        anchorElement.scrollIntoView()
=======
      let anchorElement = document.getElementById(e.id),
        targetEl = ReactDOM.findDOMNode(currentPtr)
      if (anchorElement && targetEl.ch) {
        targetEl.scrollTo(0, anchorElement.offsetTop)
>>>>>>> .r25
      }
<<<<<<< .mine
    },
  handleItemsClick = ({ externalUrl = '', id,pathname='details' }) => {
    if (externalUrl != '' && externalUrl.startsWith('http')) {
      dispatch(routerRedux.push({
        pathname: 'iframe',
        query: {
          name,
          externalUrl: externalUrl,
        },
      }))
    } else {
      dispatch(routerRedux.push({
        pathname: `/${pathname}`,
        query: {
          name,
          dataId: id,
        },
      }))
=======
    },
    handleTileClick = (data) => {
      console.log(data)
    },
    savaPtr = (el) => {
      if (el) {
        dispatch({
          type: 'updateState',
          payload: {
            ptrEl: el,
          },
        })
      }
>>>>>>> .r25
    }
<<<<<<< .mine
  }

=======

>>>>>>> .r25
  return (
    <div>
      <Nav title={name} dispatch={dispatch}/>
      <WhiteSpace size="md"/>
      <div className={styles[`${PrefixCls}-outer`]}>
        <div>
          <Tabs
            initialPage={0}
            tabs={tabs}
            onChange={handleClick}
            onTabClick={handleClick}>
          </Tabs>
          <WhiteSpace/>
<<<<<<< .mine
          {
            items&&items.map((data,i) =>{
             return <Tile  data={data} handleItemsClick={handleItemsClick}/>
          } )
          }
=======
          <PullToRefresh ref={el => currentPtr = el} sibilingsHasBanner={true}
                         children={<div id={PrefixCls + '_ptr'}>
                           {items.map((item, index) => (
                             <Tile parents={tabs[index]} items={item} colors={getCurrentColor(index)}
                                   handleClick={handleTileClick}/>))}
                         </div>
                         }
          />
>>>>>>> .r25
        </div>
      </div>
    </div>
  )
}

export default connect(({ loading, livelihood }) => ({
  loading,
  livelihood,
}))(Livelihood)
