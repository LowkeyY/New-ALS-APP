import React from 'react'
import { connect } from 'dva'
import { WingBlank, WhiteSpace, Tabs, Badge, List, SearchBar } from 'components'
import Nav from 'components/nav'
import { routerRedux } from 'dva/router'
import Banner from 'components/banner'
import styles from './index.less'
import { doDecode } from 'utils'

const PrefixCls = 'commonlist',
  Item = List.Item,
  Brief = Item.Brief

function Comp ({ location, dispatch, commonlist }) {
  const { name = '', selectedIndex = 0, grids, lists, bannerDatas, fixedLanmu } = commonlist,
    handleItemOnclick = ({ externalUrl = '', id, pathname = 'details', infos = '{}' }) => {
      let primaryParams = {}
      try {
        primaryParams = doDecode(infos)
      } catch (e) {
      }
      if (primaryParams.route && primaryParams.id) {
        pathname = primaryParams.route
        id = primaryParams.id
      }
      if (externalUrl != '' && externalUrl.startsWith('http')) {
        dispatch(routerRedux.push({
          pathname: 'iframe',
          query: {
            name,
            externalUrl: externalUrl,
          },
        }))
      } else {
        dispatch(routerRedux.push({
          pathname: `/${pathname}`,
          query: {
            name,
            id,
            dataId: id,
          },
        }))
      }
    },
    handleFiexdItemOnclick = ({ route, id, title }) => {
      if (route) {
        dispatch(routerRedux.push({
          pathname: `/${route}`,
          query: {
            name: title,
            id,
          },
        }))
      }
    },
    getContents = (lists) => {
      const result = []
      lists.map((list, i) => {
        const { id = '' } = list
        if (id != '') {
          result.push(
            <Item className={styles[`${PrefixCls}-item`]}
                  thumb={list.image || ''} multipleLine wrap arrow='horizontal'
                  onClick={handleItemOnclick.bind(null, list)}>
              <span>{list.title}</span><Brief>{list.time}</Brief>
            </Item>,
          )
        }
      })
      return <List>{result}</List>
    },
    getTabs = () => {
      const result = []
      grids.map((grid, i) => {
        const { title = '' } = grid
        if (title != '') {
          result.push({ ...grid })
        }
      })
      return result
    },
    getFixedItem = () => {
      const result = []
      if (Object.keys(fixedLanmu).length > 0 && fixedLanmu.title) {
        result.push(<WhiteSpace size="sm" style={{ backgroundColor: '#ddd' }}/>)
        result.push(<List>
          <Item className={styles[`${PrefixCls}-fixeditem`]}
                thumb={fixedLanmu.image || ''} multipleLine wrap arrow='horizontal'
                onClick={handleFiexdItemOnclick.bind(null, fixedLanmu)}>
            <span>{fixedLanmu.title}</span><Brief>{fixedLanmu.infos}</Brief>
          </Item>
        </List>)
        result.push(<WhiteSpace size="sm" style={{ backgroundColor: '#ddd' }}/>)
      }
      return result
    },
    getCurrentView = () => {
      const result = []
      if (selectedIndex == 0 && bannerDatas.length > 0) {
        const props = {
          datas: bannerDatas,
          handleClick: (data) => {
            console.log(data)
          },
        }
        result.push(<Banner {...props}/>)
        result.push(getFixedItem())
      }
      result.push(getContents(lists))
      return <div>{result}</div>
    },
    handleTabClick = (data, index) => {

      if(data.externalUrl!==''){
        
      }else {
        dispatch({
          type: 'commonlist/querySelect',
          payload: {
            ...data,
            selected: index,
          },
        })
      }
    }
  return (
    <div className={styles[`${PrefixCls}-outer`]}>
      <Nav title={name} dispatch={dispatch}/>
      <SearchBar
        placeholder="输入需要搜索的内容"
        onSubmit={value => console.log(value, 'onSubmit')}
        onClear={value => console.log(value, 'onClear')}
        onFocus={() => console.log('onFocus')}
        onBlur={() => console.log('onBlur')}
        onCancel={() => console.log('onCancel')}
        showCancelButton
        onChange={() => console.log('onChange')}
      />
      <Tabs
        initialPage={0}
        page={selectedIndex}
        tabs={getTabs()}
        swipeable={false}
        /*onChange={(tab, index) => handleTabChange(tab , index)}}*/
        onTabClick={handleTabClick}
      >
        {getCurrentView()}
      </Tabs>
    </div>

  )
}

export default connect(({ loading, commonlist }) => ({
  loading,
  commonlist,
}))(Comp)
