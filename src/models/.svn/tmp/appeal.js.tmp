import { parse } from 'qs'
import modelExtend from 'dva-model-extend'
import { model } from 'models/common'
import { queryAppealList, queryWorkCount, collectAppeal } from 'services/queryappeal'

const changeAttByItems = (items = [], id = '', isOk = false) => {
    const result = []
    items.map(item => {
      if (item.id === id) {
        item['shoucang'] = isOk
      }
      result.push(item)
    })
    return result
  },
  namespace = 'appeal'

export default modelExtend(model, {
  namespace,
  state: {
    btnDisabled: false,
    btnTitle: '',
    selectedIndex: 0,
    dataList: [],
    name: '',
    workCount: {},
  },
  subscriptions: {
    setup ({ dispatch, history }) {
      history.listen(({ pathname, action, query }) => {
        if (pathname === `/${namespace}`) {
          const { btnTitle = '发起诉求', name = '反应问题' } = query
          dispatch({
            type: 'updateState',
            payload: {
              btnDisabled: false,
              btnTitle,
              name,
            },
          })
          dispatch({
            type: 'queryCount',
          })
          dispatch({
            type: 'query',
          })
        }
      })
    },
  },
  effects: {
    * query ({ payload = {} }, { call, put, select }) {
      const { selected = -1 } = payload, { selectedIndex } = yield select(_ => _.appeal),
        currentSelectedIndex = selected != -1 ? selected : selectedIndex
      yield put({
        type: 'updateState',
        payload: {
          dataList: [],
          selectedIndex: currentSelectedIndex,
        },
      })

      const { success = false, data = [], message = '获取数据失败。' } = yield call(queryAppealList, { showType: currentSelectedIndex + 1 })
      if (success) {
        yield put({
          type: 'updateState',
          payload: {
            dataList: data,
          },
        })
      }
    },
    * queryCount ({ payload }, { call, put, select }) {
      const data = yield call(queryWorkCount)
      if (data.success) {
        yield put({
          type: 'updateState',
          payload: {
            workCount: data,
          },
        })
      }
    },
    * collent ({ payload }, { call, put, select }) {
      const { id, shoucang } = payload, { success } = yield call(collectAppeal, { ...payload, workId: id })
      if (success) {
        const { dataList } = yield select(_ => _[namespace]),
          curDataList = changeAttByItems(dataList, id, !shoucang)
        yield put({
          type: 'updateState',
          payload: {
            dataList: curDataList,
          },
        })
      }
    },
  }
  ,
})
