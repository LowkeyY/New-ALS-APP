import React from 'react'
import { connect } from 'dva'
import { WingBlank, WhiteSpace, Tabs, SegmentedControl, Badge, List, Eventlisten, Toast } from 'components'
import Ifreams from 'components/ifream'
import Nav from 'components/nav'
import HawkButton from 'components/hawkbutton'
import { routerRedux } from 'dva/router'
import Banner from 'components/banner'
import styles from './index.less'
import { config, cookie } from 'utils'

const { baseURL, privateApi, userTag } = config,
  { iframeUrlwanggequ, iframeUrlguiji, sumbitUrlPositions } = privateApi,
  { userid: userTagUserId } = userTag,
  { _cg } = cookie,
  PrefixCls = 'guard',
  tabs = [
    { title: <Badge>网格区</Badge> },
    { title: <Badge>轨迹位置</Badge> },
    { title: <Badge>任务管理</Badge> },
  ],
  Item = List.Item,
  Brief = Item.Brief

function Guard ({ location, dispatch, guard, app }) {

  const { name = '' } = location.query, { selectedIndex = 0, scrollerTop = 0, appentParam = '', taskList, dataList, segmentedIndex, pageType } = guard, { guiji = {} } = app, { serverId = '', entityId = '', guijiId = '' } = guiji
  const handlerTaskClick = ({ taskId, taskInfo, taskTitle }) => {
      dispatch(routerRedux.push(
        {
          pathname: 'taskdetails',
          query: {
            taskId,
            taskInfo,
            taskTitle,
          },
        },
      ))
    },
    handleItemClick = ({ id }) => {
      dispatch(routerRedux.push({
        pathname: '/seekdetails',
        query: {
          id,
        },
      }))
    },
    getShstate = (shtate, state) => {
      if (shtate == '0') {
        return <span style={{ color: '#ccb820' }}>●正在审核</span>
      } else if (shtate == '2') {
        return <span style={{ color: '#9c9595' }}>●不在办理范围</span>
      } else {
        return getStatus(state)
      }
    },
    getStatus = (status) => {
      switch (status) {
        case '0' :
          return <span style={{ color: '#ccb820' }}>●待审核</span>
        case '1' :
        case '2' :
        case '3' :
        case '4' :
          return <span style={{ color: '29ad2e' }}>●处理中</span>
        case '5' :
          return <span style={{ color: '#d45b5b' }}>●已完成</span>
      }
    },
    getCurrentView = (index) => {
      switch (index) {
        case 0 : {
          let isNew = false
          return (
            <List>
              {taskList && taskList.map(_ => {
                return <Item
                  multipleLine
                  onClick={handlerTaskClick.bind(null, _)}
                  wrap
                  extra={<Badge text={_.noViewCount > 0 ? _.noViewCount : ''}/>}
                  align="top"
                >
                  <div className={`${styles[`${PrefixCls}-message-title`]} ${isNew ? 'news' : ''}`}>
                    <h3>{_.taskTitle}</h3>
                  </div>
                  <div className={styles[`${PrefixCls}-message-content`]}>{_.content}</div>
                  <Brief>
                    {_.taskInfo}
                  </Brief>
                </Item>
              })
              }
            </List>
          )
        }
        case 1 : {
          let isNew = false
          return (
            <List>
              {taskList && taskList.map(_ => {
                return <Item
                  multipleLine
                  onClick={handlerTaskClick.bind(null, _)}
                  wrap
                  extra={<Badge text={_.noViewCount > 0 ? _.noViewCount : ''} overflowCount={99}/>}
                  align="top"
                >
                  <div className={`${styles[`${PrefixCls}-message-title`]} ${isNew ? 'news' : ''}`}>
                    <h3>{_.taskTitle}</h3>
                  </div>
                  <div className={styles[`${PrefixCls}-message-content`]}>{_.content}</div>
                  <Brief>
                    {_.taskInfo}
                  </Brief>
                </Item>
              })
              }
            </List>
          )
        }
        case 2 : {
          return (
            <List>
              {
                dataList && dataList.map((data) => {
                  const { content, createDate, state, shState } = data
                  return <Item
                    className={styles[`${PrefixCls}-item`]}
                    multipleLine
                    onClick={handleItemClick.bind(this, data)}
                  >
                    {content}
                    <div className={styles[`${PrefixCls}-item-status`]}>
                      <span>{createDate}</span>
                      <span>{getShstate(shState, state)}</span>
                    </div>
                  </Item>
                })
              }
            </List>
          )
        }
      }

      return ''
    },
    handleChangeView = (e) => {
      if (e.nativeEvent.selectedSegmentIndex == 2) {
        dispatch({
          type: 'guard/getAppelList',
          payload: {
            selected: e.nativeEvent.selectedSegmentIndex,
          },
        })
      } else {
        dispatch({
          type: 'guard/getTaskList',
          payload: {
            selected: e.nativeEvent.selectedSegmentIndex,
          },
        })
      }
    },
    handleTabClick = (e, i) => {
      dispatch({
        type: 'guard/updateState',
        payload: {
          scrollerTop: e,
          selectedIndex: i,
          appentParam: '',
        },
      })
    },
    handleNavClick = (route = 'warning', name = '我要反馈') => {
      dispatch(routerRedux.push({
        pathname: `/warning`,
        query: {
          name,
        },
      }))
    },
    renderNav = () => {
      return (
        <span onClick={handleNavClick}>我要反馈</span>
      )
    },
    onCnevent = (arg) => {
      const { userId = '', targetId = 1 } = arg
      if (userId != '') {
        dispatch({
          type: 'guard/updateState',
          payload: {
            selectedIndex: targetId,
            appentParam: userId,
          },
        })
      }
    },
    handleGuijiClick = (callback) => {
      let canStart = (guijiId == '')
      const onSuccess = () => {
          console.log('handleGuijiClick - onSuccess')
          dispatch({
            type: 'app/guiji',
            payload: {
              type: canStart ? 'start' : 'end',
              guijiId,
            },
          })
          callback()
          Toast.success(canStart ? '开始记录轨迹。' : '结束记录轨迹。')
        },
        onFail = (err) => {
          console.log('handleGuijiClick - onFail', err, canStart, guijiId)
          callback()
          if (!canStart) {
            dispatch({
              type: 'app/guiji',
              payload: {
                type: 'end',
                guijiId,
              },
            })
          }
          Toast.offline('请开启手机定位权限，否则无法记录轨迹。')
        }
      if (canStart) {
        cnStartJiluguiji(serverId, entityId, onSuccess.bind(this), onFail.bind(this), {
          key: _cg(userTagUserId),
          url: `${baseURL + sumbitUrlPositions}`,
        }, 1000)
      } else {
        onSuccess()
        cnStopJiluguiji()
      }
    }
  return (
    <div>
      <Nav title={name} dispatch={dispatch} renderNavRight={renderNav(guard)}/>
      <Tabs
        initialPage={selectedIndex}
        page={selectedIndex}
        tabs={tabs}
        swipeable={false}
        onTabClick={handleTabClick}
      >
        <div>
          <Ifreams src={`${baseURL + iframeUrlwanggequ}`} dispatch={dispatch}/>
        </div>
        <div style={{ position: 'relative' }}>
          <Ifreams src={`${baseURL + iframeUrlguiji + (appentParam == '' ? '' : '?userId=' + appentParam)}`}
                   dispatch={dispatch}/>
          {serverId != '' && entityId != '' ?
            <HawkButton btnStatus={guijiId != ''} handleClick={handleGuijiClick}/> : ''}
        </div>
        <div>
          <WhiteSpace size="md"/>
          <SegmentedControl
            selectedIndex={segmentedIndex}
            onChange={handleChangeView}
            values={['未完成', '已完成', '反馈']}
          />
          <WhiteSpace size="md"/>
          {getCurrentView(segmentedIndex)}
        </div>
      </Tabs>
      <Eventlisten willCallback={onCnevent}/>
    </div>

  )
}

export default connect(({ loading, guard, app }) => ({
  loading,
  guard,
  app,
}))(Guard)
