import { Component } from 'react'
import ReactDOM from 'react-dom'
import { connect } from 'dva'
import { Icon, WhiteSpace, Accordion, Button, Eventlisten, Toast } from 'components'
import ChartRoom from 'components/chatroom'
import Nav from 'components/nav'
import { getLocalIcon } from 'utils'
import styles from './index.less'

const PrefixCls = 'taskdetails'

<<<<<<< .mine
function TaskDetails ({ location, dispatch, taskdetails ,app}) {
  console.log(taskdetails)
  const  {user ={}} =app
  const {userid=''} = user
=======
function TaskDetails ({ location, dispatch, taskdetails }) {
>>>>>>> .r40
  const { name = '' } = location.query,
    { chartArr, val, isDisabled, taskInfo, taskTitle, localArr, imageArr, workId } = taskdetails
  const onSubmit = ({ msgType = 0, content = '' }) => {
      let params = { msgType, taskId: workId },
        images = [],
        files = {},
        errorMessages = ''
      switch (msgType) {
        case 0: {
          if (content != '') {
            params.msgInfo = content
          } else {
            errorMessages = '不能发送空消息。'
          }
          break
        }
        case 1: {
          if (content != '') {
            images.push({
              'msgFile': content,
            })
          } else {
            errorMessages = '图片无法获取。'
          }
          break
        }
        case 2: {
          if (content != '') {
            files = {
              'msgFile': content,
            }
          } else {
            errorMessages = '文件无法获取。'
          }
          break
        }
      }
      if (errorMessages == '') {
        dispatch({
          type: 'taskdetails/updateState',
          payload: {
            chartArr: [...chartArr, { ...params, isLoad: true }],
          },
        })
        dispatch({
          type: 'taskdetails/sendMsgFiles',
          payload: {
            params,
            images,
            files,
          },
        })
      } else {
        Toast.offline(errorMessages)
      }
    },
    onCnevent = (arg) => {

    }
  const props = {
    handlerSubmit: onSubmit,
    dispatch,
    isDisabled,
    userid
  }
  return (
    <div>
      <Nav title='任务详情' dispatch={dispatch}/>
      <div className={styles[`${PrefixCls}-outer`]}>
        <div className={styles[`${PrefixCls}-outer-title`]}>
          {taskTitle}
        </div>
        <Accordion className={styles[`${PrefixCls}-outer-taskdetails`]}>
          <Accordion.Panel header={
            <div className={styles[`${PrefixCls}-outer-taskdetails-title`]}>
              <Icon type={getLocalIcon('/others/task.svg')} size="md"/>
              <span>【任务详情】</span>
            </div>
          }>
            <span className={styles[`${PrefixCls}-outer-taskdetails-content`]}>
              {taskInfo}
            </span>
          </Accordion.Panel>
        </Accordion>
        <div className={styles[`${PrefixCls}-outer-control`]}>
          <Button type="primary" inline size="small" style={{ marginRight: '4px' }}>接受</Button>
          <Button type="primary" inline size="small" style={{ marginRight: '4px' }}>取消</Button>
        </div>
        <div className={styles[`${PrefixCls}-outer-chat`]}>
          <Icon type={getLocalIcon('/others/chat.svg')} size="md"/>
          <span className={styles[`${PrefixCls}-outer-details-title`]}>【任务汇报】</span>
        </div>
      </div>
      <ChartRoom {...props} localArr={chartArr}/>
      <Eventlisten willCallback={onCnevent}/>
    </div>
  )
}

export default connect(({ loading, taskdetails,app }) => ({
  loading,
  taskdetails,
  app
}))(TaskDetails)
