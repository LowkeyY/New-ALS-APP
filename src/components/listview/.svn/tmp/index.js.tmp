import {PullToRefresh, ListView} from 'antd-mobile';
import ReactDOM from 'react-dom';
import {getOffsetTopByBody} from 'utils';
import TitleBox from 'components/titlecontainer'
import styles from './index.less'

let PrefixCls = 'cn-listview', globalIndex = 0, getId = (name = '', last = false) => {
  return `${name || PrefixCls}-${last ? globalIndex : ++globalIndex}`
}

class Comp extends React.Component {
  constructor(props) {
    super(props);
    const dataSource = new ListView.DataSource({
      rowHasChanged: (row1, row2) => row1 !== row2,
    });

    this.state = {
      dataSource,
      refreshing: true,
      isLoading: true,
      height: document.documentElement.clientHeight,
    };
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.dataSource !== this.props.dataSource) {
      this.setState({
        dataSource: this.state.dataSource.cloneWithRows(nextProps.dataSource),
      });
    }
  }

  componentDidUpdate() {
    if (this.props.useBodyScroll) {
      document.body.style.overflow = 'auto';
    } else {
      document.body.style.overflow = 'hidden';
    }
  }

  componentDidMount() {
    let hei = this.state.height, el
    if (el = ReactDOM.findDOMNode(this.lv)) {
      hei = cnhtmlHeight - getOffsetTopByBody(el) - cnhtmlSize
    }
    setTimeout(() => {
      let {dataSource} = this.state
      if (this.props.dataSource.length)
        dataSource = dataSource.cloneWithRows(this.props.dataSource)
      this.setState({
        dataSource,
        height: hei,
        refreshing: false,
        isLoading: false,
      });
      if (this.props.scrollerTop > 0)
        this.lv.scrollTo(0, this.props.scrollerTop);
    }, 100);
  }

  componentWillUnmount() {
    let scrollTop = document.documentElement.scrollTop;
    if (scrollTop && this.props.onScrollerTop) {
      this.props.onScrollerTop(scrollTop)
    }
  }

  onRefresh = () => {
    console.log("0", this.state)
    this.setState({refreshing: true, isLoading: true});
    console.log("1", this.state)
    if (this.props.onRefresh) {
      const cb = () => {
        this.setState({
          refreshing: false,
          isLoading: false,
        });
      }
      this.props.onRefresh(cb.bind(this))
    } else
      setTimeout(() => {
        this.setState({
          refreshing: false,
          isLoading: false,
        });
      }, 1000);
  };

  onEndReached = (event) => {
    if (this.state.isLoading || !this.props.hasMore) {
      return;
    }
    this.setState({isLoading: true});
    if (this.props.onEndReached) {
      const cb = () => {
        this.setState({
          isLoading: false,
        });
      }
      this.props.onEndReached(cb.bind(this))
    } else
      setTimeout(() => {
        this.setState({
          isLoading: false,
        });
      }, 1000);
  };

  layoutSeparator(sectionID, rowID) {
    if (this.props.layoutSeparator)
      return this.props.layoutSeparator(sectionID, rowID)
    return
    <div
      key={`${sectionID}-${rowID}`}
      style={{
        backgroundColor: '#F5F5F9',
        height: 8,
        borderTop: '1px solid #ECECED',
        borderBottom: '1px solid #ECECED',
      }}
    />
  }

  layoutRow(rowData, sectionID, rowID) {
    if (this.props.layoutRow)
      return this.props.layoutRow(rowData, sectionID, rowID,this.props.handleItemOnclick)
    return ''
  }

  layoutHeader() {
    if (this.props.layoutHeader)
      return <TitleBox title={this.props.layoutHeader()}/>
    return ''
  }

  layoutFooter() {
    if (this.props.layoutFooter)
      return this.props.layoutFooter(this.state.isLoading)
    return <div style={{padding: 30, textAlign: 'center'}}>
      {this.state.isLoading ? '加载中...' : '加载完毕'}
    </div>
  }

  render() {
    return (
      <div className={styles[`${PrefixCls}-outer`]}>
        <ListView
          key={getId()}
          ref={el => this.lv = el}
          dataSource={this.state.dataSource}
          renderHeader={this.layoutHeader.bind(this)}
          renderFooter={this.layoutFooter.bind(this)}
          renderRow={this.layoutRow.bind(this)}
          renderSeparator={this.layoutSeparator.bind(this)}
          useBodyScroll={this.props.useBodyScroll}
          style={this.props.useBodyScroll ? {} : {
            height: this.state.height,
            border: '1px solid #ddd',
            margin: '5px 0',
          }}
          pullToRefresh={<PullToRefresh
            refreshing={this.state.refreshing}
            onRefresh={this.onRefresh}
          />}
          onEndReached={this.onEndReached.bind(this)}
          onEndReachedThreshold={100}
          pageSize={this.props.pageSize}
        />
      </div>
    );
  }

  static defaultProps = {
    dataSource: [],
    useBodyScroll: true,
    hasMore: false,
    pageSize: 10,
    onRefresh: '',
    layoutHeader: '',
    layoutFooter: '',
    layoutRow: '',
    layoutSeparator: '',
    scrollerTop: 0,
    onScrollerTop: ''
  }
}

export default Comp;
